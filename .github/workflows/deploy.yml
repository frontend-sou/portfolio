name: Deploy Application

on:
  workflow_dispatch:
    inputs:
      target-env:
        description: "Environment"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - prod
          - stg

jobs:
  deploy_app:
    permissions:
      id-token: write
      contents: read

    runs-on: ubuntu-latest

    env:
      ECR_REPOSITORY: ${{ github.event.inputs.target-env }}-souharu
      SERVICE_NAME: ${{ github.event.inputs.target-env }}-souharu
      IMAGE_TAG: ${{ github.sha }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::590183816441:role/Github-action
          aws-region: ap-northeast-1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to ecr
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build --platform linux/amd64 -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f ./Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition $SERVICE_NAME \
          --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.SERVICE_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.SERVICE_NAME }}
          cluster: ${{ env.SERVICE_NAME }}
          wait-for-service-stability: true
