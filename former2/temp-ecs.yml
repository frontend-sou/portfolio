AWSTemplateFormatVersion: '2010-09-09'
Description: "create ECS,ALB"
Parameters:
  ProjectName:
    Type: String
    Description: Project name.
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Select a VPC that allows instances access to the Internet.
  PrivateSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select at public subnets in your selected VPC.
  PublicSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select at public subnets in your selected VPC.
  ALBAllowCidrIp:
    Type: String
    Description: CIDR IP of VPN.
  ECSDesiredCapacity:
    Type: Number
    Description: Number of instances to launch in your ECS cluster.
  ECSMaxCapacity:
    Type: Number
    Description: Maximum number of instances that can be launched in your ECS cluster.
  ECSContainerPort:
    Type: Number
    Description: Port Number of container created by the task.
  ECSContainerLogsRetentionInDays:
    Type: Number
    Description: Number of days to retain the log events of container created by the task.
  ECSTaskCpuMB:
    Type: Number
    Description: Number of cpu units used by the task.
  ECSTaskMemory:
    Type: Number
    Description: Amount of memory used by the task.
  TargetGroupHealthCheckPath:
    Type: String
    Description: Destination for health checks on the targets.
  ACMArn:
    Type: String
    Description: Select Arn for ssl/tls certificate.
  HostZoneId:
    Type: AWS::Route53::HostedZone::Id
    Description: ID of the hosted zone.
  Domain:
    Type: String
    Description: Name of domain.
Mappings:
  S3Config:
    us-east-1:
      BucketPrincipal: '127311923021'
    us-east-2:
      BucketPrincipal: '033677994240'
    us-west-1:
      BucketPrincipal: '027434742980'
    us-west-2:
      BucketPrincipal: '797873946194'
    ca-central-1:
      BucketPrincipal: '985666609251'
    eu-west-1:
      BucketPrincipal: '156460612806'
    eu-central-1:
      BucketPrincipal: '054676820928'
    eu-west-2:
      BucketPrincipal: '652711504416'
    ap-northeast-1:
      BucketPrincipal: '582318560864'
    ap-northeast-2:
      BucketPrincipal: '600734575887'
    ap-southeast-1:
      BucketPrincipal: '114774131450'
    ap-southeast-2:
      BucketPrincipal: '783225319266'
    ap-south-1:
      BucketPrincipal: '718504428378'
    sa-east-1:
      BucketPrincipal: '507241528517'
    us-gov-west-1:
      BucketPrincipal: '048591011584'
    cn-north-1:
      BucketPrincipal: '638102146993'

Resources:
  ###################################################
  # IAM
  ###################################################
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ecsTaskExecutionPolicy
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - ecr:GetAuthorizationToken
                - ecr:BatchCheckLayerAvailability
                - ecr:GetDownloadUrlForLayer
                - ecr:BatchGetImage
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: '*'

  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - application-autoscaling.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: ecsAutoScalingPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: 
                  - application-autoscaling:*
                  - cloudwatch:DescribeAlarms
                  - cloudwatch:PutMetricAlarm
                  - ecs:DescribeServices
                  - ecs:UpdateService
                Resource: '*'


  ###################################################
  # SecurityGroup
  ###################################################
  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: ALBSecurityGroup
    Properties:
      GroupDescription: ECS Security Group
      VpcId: !Ref VpcId

  ECSSecurityGroupHTTPinbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: !Sub ${ProjectName}-alb
      GroupId: !Ref ECSSecurityGroup
      IpProtocol: tcp
      FromPort: !Ref ECSContainerPort
      ToPort: !Ref ECSContainerPort
      SourceSecurityGroupId: !Ref ALBSecurityGroup

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Security Group
      VpcId: !Ref VpcId

  ALBSecurityGroupHTTPinbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: vpn ip
      GroupId: !Ref ALBSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: !Ref ALBAllowCidrIp

  ALBSecurityGroupHTTPSinbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: vpn ip
      GroupId: !Ref ALBSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: !Ref ALBAllowCidrIp


  ###################################################
  # ECS
  ###################################################
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${ProjectName}-cluster

  ECSService:
    Type: AWS::ECS::Service
    DependsOn:
      - ALBHTTPListener
      - ALBHTTPSListener #Route53用
    Properties:
      ServiceName: !Sub ${ProjectName}-service
      Cluster: !Ref ECSCluster
      DesiredCount: !Ref ECSDesiredCapacity
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: !Ref ProjectName
          ContainerPort: !Ref ECSContainerPort
          TargetGroupArn: !Ref TargetGroup
      TaskDefinition: !Ref ECSTaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref ECSSecurityGroup
          Subnets: !Ref PublicSubnetIds #ECSをパブリックサブネットに構築

  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${ProjectName}
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: !Ref ProjectName
          PortMappings:
            - ContainerPort: !Ref ECSContainerPort
              HostPort: !Ref ECSContainerPort
              Protocol: tcp
          Image:
            Fn::ImportValue:
              !Sub ${ProjectName}-ecr-repository-uri
      Cpu: !Ref ECSTaskCpuMB
      Memory: !Ref ECSTaskMemory
      TaskRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      RequiresCompatibilities: 
        - FARGATE
      NetworkMode: awsvpc


  ###################################################
  # ALB
  ###################################################
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${ProjectName}-alb
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '30'
        - Key: access_logs.s3.enabled
          Value: 'true'
        - Key: access_logs.s3.bucket
          Value: !Sub ${ProjectName}-alb-logs
      Subnets: !Ref PublicSubnetIds
      SecurityGroups:
        - !Ref ALBSecurityGroup

  ALBHTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref ALB

  ALBHTTPListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - '*'
      ListenerArn: !Ref ALBHTTPListener
      Priority: 1

  ALBHTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref ACMArn
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref ALB

  ALBHTTPSListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - '*'
      ListenerArn: !Ref ALBHTTPSListener
      Priority: 1

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: ALB
    Properties:
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: !Ref TargetGroupHealthCheckPath
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: !Sub ${ProjectName}-tg
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      TargetType: ip
      VpcId: !Ref VpcId

  DNSRecordSet:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref HostZoneId
      RecordSets:
        - Name: !Ref Domain
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt ALB.CanonicalHostedZoneID
            DNSName:
              Fn::Join:
                - '.'
                - - dualstack
                  - !GetAtt ALB.DNSName


  ###################################################
  # AutoScale
  ###################################################
  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !Ref ECSMaxCapacity
      MinCapacity: 1
      ResourceId:
        Fn::Join:
          - ''
          - - service/
            - !Ref ECSCluster
            - /
            - !GetAtt ECSService.Name
      RoleARN: !GetAtt AutoScalingRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  AutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ${ProjectName}-target-tracking-policy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification: 
          PredefinedMetricType: ECSServiceAverageCPUUtilization 
        ScaleInCooldown: 300
        ScaleOutCooldown: 300
        TargetValue: 70

  ###################################################
  # CloudWatch
  ###################################################
  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${ProjectName}
      RetentionInDays: !Ref ECSContainerLogsRetentionInDays

  ###################################################
  # S3
  ###################################################
  ALBLogBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${ProjectName}-alb-logs
  BucketPolicyELBLogBucket:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ALBLogBucket
      PolicyDocument:
        Id: !Sub ${ProjectName}-alb-logs-policy
        Version: '2012-10-17'
        Statement:
          - Action:
              - s3:PutObject
            Effect: Allow
            Resource:
              Fn::Join:
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref ALBLogBucket
                  - /AWSLogs/
                  - !Ref AWS::AccountId
                  - /*
            Principal:
              AWS:
                Fn::FindInMap:
                  - S3Config
                  - !Ref AWS::Region
                  - BucketPrincipal
